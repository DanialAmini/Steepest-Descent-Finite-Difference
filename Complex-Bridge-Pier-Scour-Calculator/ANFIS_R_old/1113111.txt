> 
> setwd("C:/Users/Computer Emergency/Desktop/scourpaper/Complex-Bridge-Pier-Scour-Calculator-1.0/ANFIS-r files")  #set working folder
> 
> rmse <- function(error)
+ {
+   sqrt(mean(error^2))
+ }
> #x1 log(bpg/bpc+.05)x2 log(bcol/bpc+.05)x3 log(h0/y+2.1)x4 log(h1/y+1.55)
> #x5 log(T/y+.05)x6 log(bpc/y)x7 log(f1/bcol+.05)z log(be/b*+.05)
> 
> MyData = read.csv("anfis-log_x_b3.txt",header=TRUE)
> MyData2 = read.csv("test_data.txt",header=TRUE)
> 
> 
> library("anfis")
> require("parallel")
> if(.Platform$OS.type == "windows"){
+ options(mc.cores=5)
+ }else{
+ options(mc.cores=5) 
+ }
> 
> membershipFunction<-list(
+ x1m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.91,sigma=.2))),
+ 
+ x2m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.4))),
+ 
+ x3m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.29,sigma=0.80))),
+ 
+ x4m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.00,sigma=0.1)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.24,sigma=0.1)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.41,sigma=0.1))),
+ 
+ x5m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.48,sigma=0.50))),
+ 
+ x6m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.13,sigma=0.78))),
+ 
+ x7m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.27,sigma=0.5))))
> 
> X=MyData[,1:7]
> Y=MyData[,8,drop=FALSE]
> 
> X2=MyData2[,1:7]
> Y2=MyData2[,8,drop=FALSE]
> 
> X= as.matrix(as.data.frame(lapply(X, as.numeric)))
> typeof(X)
[1] "double"
> typeof(Y)
[1] "list"
> Y= as.matrix(as.data.frame(lapply(Y, as.numeric)))
> 
> X2= as.matrix(as.data.frame(lapply(X2, as.numeric)))
> Y2= as.matrix(as.data.frame(lapply(Y2, as.numeric)))
> 
> anfis3 <- new(Class="ANFIS",X,Y,membershipFunction)
> 
> trainOutput <- trainHybridJangOffLine(anfis3, epochs=10)
[1] "epoch:  1"
[1] "epoch:  2"
[1] "epoch:  3"
[1] "epoch:  4"
[1] "epoch:  5"
[1] "epoch:  6"
[1] "epoch:  7"
[1] "epoch:  8"
[1] "epoch:  9"
> 
> 
> summary(anfis3)
ANFIS network 
Trainning Set: 
         dim(x)= 279x7 
         dim(y)= 279x1 
Arquitecture:  7 ( 1x1x1x3x1x1x1 ) - 3 - 24 ( 24x1 ) - 1 
Last training error:  6.109893 

Call: trainHybridJangOffLine(object = anfis3, epochs = 10)

Statistics for Off-line training
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6.11    6.11    6.11    6.11    6.11    6.11 
> coef(anfis3)
$`premises`
$`premises`$`x1m`
$`premises`$`x1m`[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.9105083  0.1984561 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x2m
$`premises`$x2m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.3197314  0.3326591 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x3m
$`premises`$x3m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.29  0.80 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x4m
$`premises`$x4m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
         mu       sigma 
3.50782e-24 1.00000e-01 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x4m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.24  0.10 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x4m[[3]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.41  0.10 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x5m
$`premises`$x5m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.4803053  0.4998467 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x6m
$`premises`$x6m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.1303573  0.7799404 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x7m
$`premises`$x7m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.27  0.50 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))



$consequents
                z
 [1,]  0.50006155
 [2,] -0.89767539
 [3,]  0.62301223
 [4,] -0.89352829
 [5,]  0.19930723
 [6,] -0.53997980
 [7,] -0.15612220
 [8,] -0.12498574
 [9,] -0.45684140
[10,]  0.56455661
[11,]  0.40299388
[12,]  2.02450505
[13,] -0.17770869
[14,]  0.03167317
[15,] -0.26444446
[16,] -0.79183810
[17,]  0.38250930
[18,] -0.20980815
[19,] -1.53291910
[20,]  2.86047859
[21,] -0.13767803
[22,]  0.09332062
[23,]  0.21162410
[24,] -0.63974593

> 
> predictedY <- predict(anfis3,X)
> err=rmse(MyData$z-predictedY)
> err
[1] 0.147984
> 
> 
> predictedY2 <- predict(anfis3,X2)
> err2=rmse(MyData2$z-predictedY2)
> err2
[1] 1.276133
> 
> graphics.off()
> dev.new()
> 
> axislimit_u= max( max(MyData$z),max(predictedY))
> axislimit_l= min( min(MyData$z),min(predictedY),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData$z,predictedY,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("train-rmse",round(err,2)))
> 
> dev.new(xpos=100)
> 
> axislimit_u= max( max(MyData2$z),max(predictedY2))
> axislimit_l= min( min(MyData2$z),min(predictedY2),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData2$z,predictedY2,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("test-rmse=",round(err2,2)))
> 
> 
> 
> 
> 
> vars=7
> 
> 
> list_coef=coef(anfis3)$consequents
> 
> no_functions=length(list_coef)/(vars+1)
> 
> for (i in 1:no_functions)
+ {
+ if(i==1){cat("\n")}
+ str=i
+ str=paste('z',i,'=',list_coef[(i-1)*(vars+1)+vars+1], sep = '')
+ for (j in 1:vars)
+ {
+ str=paste(str,'+',list_coef[(i-1)*(vars+1)+j],'*x',j, sep = '')
+ }
+ str=paste(str,"\n")
+ cat(str)
+ if(i==no_functions){cat("\n")}
+ }

z1=-0.124985737030661+0.500061554593601*x1+-0.897675387455261*x2+0.623012228630802*x3+-0.893528294864896*x4+0.199307228484202*x5+-0.539979802845218*x6+-0.156122199748987*x7 
z2=-0.791838096973393+-0.456841395050474*x1+0.564556606734707*x2+0.402993876234226*x3+2.02450504522855*x4+-0.177708692052218*x5+0.0316731666211062*x6+-0.264444455142755*x7 
z3=-0.639745930270762+0.382509297756597*x1+-0.209808149607375*x2+-1.5329191021861*x3+2.86047858501976*x4+-0.137678028688477*x5+0.0933206182057143*x6+0.211624101453347*x7 

> 
> 
> list_coef
                z
 [1,]  0.50006155
 [2,] -0.89767539
 [3,]  0.62301223
 [4,] -0.89352829
 [5,]  0.19930723
 [6,] -0.53997980
 [7,] -0.15612220
 [8,] -0.12498574
 [9,] -0.45684140
[10,]  0.56455661
[11,]  0.40299388
[12,]  2.02450505
[13,] -0.17770869
[14,]  0.03167317
[15,] -0.26444446
[16,] -0.79183810
[17,]  0.38250930
[18,] -0.20980815
[19,] -1.53291910
[20,]  2.86047859
[21,] -0.13767803
[22,]  0.09332062
[23,]  0.21162410
[24,] -0.63974593
> 
> 
> for (i in 1:vars){
+ if(i==1){cat("\n")}
+ #if(length(membershipFunction[[i]])>1){
+ for (j in 1:length(membershipFunction[[i]])){
+ str=""
+ mu__=getPremises(anfis3)[[i]][[j]][1][[1]]
+ stdev__=getPremises(anfis3)[[i]][[j]][2][[1]]
+ str=paste(str,"w",i,'_',j,"=exp(-0.5*(x",i,"-",mu__,") ^ 2/",stdev__," ^ 2)",sep="")
+ cat(str,"\n")
+ }
+ cat("\n")
+ #}
+ }

w1_1=exp(-0.5*(x1--0.910508328845871) ^ 2/0.198456140804986 ^ 2) 

w2_1=exp(-0.5*(x2--1.31973138934677) ^ 2/0.332659065879898 ^ 2) 

w3_1=exp(-0.5*(x3-0.29) ^ 2/0.8 ^ 2) 

w4_1=exp(-0.5*(x4-3.50781962999824e-24) ^ 2/0.1 ^ 2) 
w4_2=exp(-0.5*(x4-0.24) ^ 2/0.1 ^ 2) 
w4_3=exp(-0.5*(x4-0.41) ^ 2/0.1 ^ 2) 

w5_1=exp(-0.5*(x5--0.480305312492127) ^ 2/0.499846719768778 ^ 2) 

w6_1=exp(-0.5*(x6--0.130357275480262) ^ 2/0.779940379711367 ^ 2) 

w7_1=exp(-0.5*(x7-0.27) ^ 2/0.5 ^ 2) 

> 
> for (i in 1:no_functions){
+ str=paste('ww',i,'=',sep='')
+ for (j in 1:vars){
+ str=paste(str,'w',j,'_',getRules(anfis3)[i,j],sep='')
+ if(j<vars){str=paste(str,'*',sep='')}
+ }
+ cat(str,"\n")
+ }
ww1=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww2=w1_1*w2_1*w3_1*w4_2*w5_1*w6_1*w7_1 
ww3=w1_1*w2_1*w3_1*w4_3*w5_1*w6_1*w7_1 
> 
> str='\nwwN='
> str2='\nz='
> for (i in 1:no_functions){
+ str=paste(str,'ww',i,sep='')
+ str2=paste(str2,'z',i,'*ww',i,sep='')
+ if(i<no_functions){str=paste(str,'+',sep='')}
+ if(i<no_functions){str2=paste(str2,'+',sep='')}
+ }
> str=paste(str,'\n\n')
> str2=paste(str2,'\n\n')
> 
> cat(str)

wwN=ww1+ww2+ww3 

> cat(str2)

z=z1*ww1+z2*ww2+z3*ww3 

> 
> fitted.values(anfis3)
                   z
  [1,] -0.1904524195
  [2,] -0.1773403015
  [3,] -0.1826906689
  [4,] -0.1899804925
  [5,] -0.1974593287
  [6,] -0.1764900995
  [7,] -0.1442760997
  [8,] -0.1562565688
  [9,] -0.1430066415
 [10,] -0.1757929002
 [11,] -0.1754939186
 [12,] -0.1826315491
 [13,] -0.1415026739
 [14,] -0.1531540188
 [15,] -0.1670554252
 [16,] -0.1492327421
 [17,] -0.1432492837
 [18,] -0.1296812517
 [19,] -0.1498257543
 [20,] -0.1332498640
 [21,] -0.1077772220
 [22,] -0.1900609202
 [23,] -0.1352040800
 [24,] -0.1538799736
 [25,] -0.1454370296
 [26,] -0.1382280816
 [27,] -0.1294878578
 [28,] -0.1194057612
 [29,] -0.1081032422
 [30,] -0.0956562497
 [31,] -0.0890181957
 [32,] -0.1802382295
 [33,] -0.1916053826
 [34,] -0.0741134867
 [35,] -0.1690310743
 [36,] -0.1690310743
 [37,] -0.1575921161
 [38,] -0.1344014185
 [39,] -0.1183171775
 [40,] -0.1197600158
 [41,] -0.1204326144
 [42,] -0.0871269124
 [43,] -0.0875415615
 [44,] -0.1298486251
 [45,] -0.1207465393
 [46,] -0.1261469976
 [47,] -0.1318465031
 [48,] -0.1869988049
 [49,] -0.1722238235
 [50,] -0.1319585296
 [51,] -0.0847277784
 [52,] -0.1177009388
 [53,] -0.1812095058
 [54,] -0.1425402504
 [55,] -0.2054757281
 [56,] -0.1627361580
 [57,] -0.1304549694
 [58,] -0.1705824395
 [59,] -0.1348116269
 [60,] -0.1684914283
 [61,] -0.1406017473
 [62,] -0.1770142337
 [63,] -0.1109395979
 [64,] -0.1874606018
 [65,] -0.2484219784
 [66,] -0.0608977912
 [67,] -0.1020572756
 [68,] -0.0078828479
 [69,] -0.0123922978
 [70,] -0.0423016717
 [71,] -0.1260266617
 [72,] -0.0225100316
 [73,]  0.0416756619
 [74,] -0.0060566779
 [75,] -0.0799920421
 [76,] -0.1057840416
 [77,] -0.0961463590
 [78,] -0.0395627266
 [79,] -0.0701082755
 [80,] -0.1282208552
 [81,] -0.1146397618
 [82,] -0.0976253002
 [83,] -0.0614614197
 [84,] -0.0907229972
 [85,] -0.0844320866
 [86,] -0.0905136263
 [87,] -0.0888892498
 [88,] -0.0699162292
 [89,] -0.0994785894
 [90,] -0.0217164529
 [91,] -0.0919525581
 [92,] -0.0696042989
 [93,] -0.0930578021
 [94,] -0.1264156572
 [95,] -0.0860330717
 [96,] -0.0821331774
 [97,] -0.0506436869
 [98,] -0.0529150151
 [99,] -0.0784348864
[100,] -0.1239513890
[101,] -0.0681658929
[102,] -0.0400643406
[103,] -0.1206516732
[104,]  0.0158704173
[105,] -0.0857089348
[106,] -0.0784741061
[107,] -0.1509873061
[108,] -0.2026589794
[109,] -0.1064690090
[110,] -0.0692939641
[111,] -0.0392499710
[112,] -0.0692939641
[113,] -0.0392499710
[114,] -0.1209672898
[115,] -0.1223528060
[116,] -0.2279965284
[117,] -0.1993587827
[118,] -0.2219646046
[119,] -0.2161115096
[120,] -0.2146143348
[121,] -0.2149484146
[122,] -0.2063108251
[123,] -0.2049515071
[124,] -0.1880975092
[125,] -0.1820706359
[126,] -0.1036715739
[127,] -0.1059357952
[128,] -0.0968303630
[129,] -0.0922943412
[130,] -0.0913273511
[131,] -0.2849953072
[132,] -0.2789430754
[133,] -0.2885386990
[134,] -0.2857076232
[135,] -0.2857076232
[136,] -0.3022564731
[137,] -0.3043789508
[138,] -0.2667178979
[139,] -0.3074576657
[140,] -0.2981099147
[141,] -0.1894271702
[142,] -0.2865324014
[143,]  0.0365448056
[144,]  0.0596968337
[145,] -0.2185931238
[146,] -0.1321068910
[147,] -0.0560579133
[148,] -0.2753700756
[149,] -0.2564584782
[150,] -0.2235075454
[151,] -0.1779927717
[152,] -0.1947152031
[153,]  0.0069214761
[154,] -0.0108744882
[155,] -0.0295777346
[156,]  0.0165879918
[157,]  0.0124094159
[158,] -0.0048176347
[159,] -0.0346742901
[160,] -0.0705326844
[161,] -0.0887016410
[162,] -0.0964106275
[163,] -0.1283640419
[164,] -0.1947091512
[165,] -0.1107786732
[166,] -0.1516122797
[167,] -0.1699490514
[168,] -0.0867377925
[169,] -0.1230278508
[170,] -0.0185810869
[171,] -0.0513489648
[172,] -0.1482229128
[173,] -0.1909640583
[174,] -0.2607782156
[175,] -0.1556883564
[176,] -0.1484711335
[177,] -0.2359624423
[178,] -0.0583851999
[179,] -0.0195197275
[180,]  0.0448393534
[181,] -0.0204087268
[182,] -0.1364899248
[183,] -0.0670911769
[184,] -0.0886874039
[185,] -0.2017118242
[186,] -0.2020911832
[187,] -0.1905411198
[188,] -0.1576741860
[189,] -0.1407939882
[190,] -0.1275577902
[191,] -0.1459303482
[192,] -0.3057520529
[193,] -0.1844474245
[194,] -0.1697005469
[195,] -0.1905411198
[196,] -0.1949305508
[197,] -0.1252275453
[198,] -0.1694593255
[199,] -0.1627422216
[200,] -0.1550217422
[201,] -0.1470289627
[202,] -0.1302144037
[203,] -0.1213841664
[204,] -0.1122647411
[205,] -0.1028495302
[206,] -0.0931309694
[207,] -0.0831004990
[208,] -0.0620643592
[209,] -0.0278941231
[210,] -0.0349440144
[211,] -0.0435028059
[212,] -0.0705346516
[213,] -0.2578946425
[214,]  0.0384361969
[215,]  0.0431255903
[216,]  0.0564211918
[217,] -0.2712818075
[218,] -0.2354716137
[219,] -0.2608015063
[220,] -0.1174988374
[221,] -0.0691849579
[222,] -0.2262672716
[223,] -0.0607855582
[224,] -0.0537587026
[225,] -0.1625183755
[226,] -0.1780507828
[227,] -0.1847984540
[228,] -0.1032375343
[229,] -0.2350504553
[230,] -0.2772315995
[231,] -0.3139920205
[232,] -0.3312290037
[233,] -0.2212726852
[234,]  0.0007609151
[235,] -0.1792094858
[236,] -0.2066082473
[237,] -0.2526271031
[238,] -0.2605149439
[239,]  0.1351640279
[240,] -0.0833113681
[241,] -0.0023262817
[242,]  0.0778297857
[243,] -0.0950566131
[244,] -0.0686920978
[245,] -0.0120056554
[246,] -0.1070945087
[247,] -0.1779872714
[248,] -0.3060272497
[249,] -0.2845520944
[250,] -0.1040496874
[251,] -0.0918080691
[252,] -0.0813167139
[253,] -0.0777151609
[254,] -0.2111926636
[255,] -0.2983468962
[256,] -0.1978433701
[257,] -0.0155703417
[258,] -0.1289666091
[259,] -0.1850082521
[260,] -0.1709869107
[261,] -0.2556094739
[262,] -0.1623626472
[263,] -0.0549875610
[264,] -0.3324175141
[265,] -0.2669205583
[266,] -0.2946400352
[267,] -0.1895737228
[268,] -0.3518862867
[269,] -0.4048644265
[270,] -0.3167677993
[271,] -0.1024983646
[272,] -0.0646076766
[273,]  0.0827983358
[274,] -0.0549152598
[275,] -0.2202510391
[276,] -0.3337565684
[277,] -0.3236936048
[278,] -0.1464026486
[279,] -0.0192117369
> 
> plotMFs(anfis3)
> 
