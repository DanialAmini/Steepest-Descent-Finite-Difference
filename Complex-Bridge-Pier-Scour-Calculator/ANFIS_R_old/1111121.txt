> 
> setwd("C:/Users/Computer Emergency/Desktop/scourpaper/Complex-Bridge-Pier-Scour-Calculator-1.0/ANFIS-r files")  #set working folder
> 
> rmse <- function(error)
+ {
+   sqrt(mean(error^2))
+ }
> #x1 log(bpg/bpc+.05)x2 log(bcol/bpc+.05)x3 log(h0/y+2.1)x4 log(h1/y+1.55)
> #x5 log(T/y+.05)x6 log(bpc/y)x7 log(f1/bcol+.05)z log(be/b*+.05)
> 
> MyData = read.csv("anfis-log_x_b3.txt",header=TRUE)
> MyData2 = read.csv("test_data.txt",header=TRUE)
> 
> 
> library("anfis")
> require("parallel")
> if(.Platform$OS.type == "windows"){
+ options(mc.cores=5)
+ }else{
+ options(mc.cores=5) 
+ }
> 
> membershipFunction<-list(
+ x1m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.91,sigma=.2))),
+ 
+ x2m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.4))),
+ 
+ x3m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.5,sigma=0.40))),
+ 
+ x4m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.00,sigma=0.1))),
+ 
+ x5m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.2,sigma=0.40))),
+ 
+ x6m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.7,sigma=0.4)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=+0.7,sigma=0.4))),
+ 
+ x7m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.27,sigma=0.5))))
> 
> X=MyData[,1:7]
> Y=MyData[,8,drop=FALSE]
> 
> X2=MyData2[,1:7]
> Y2=MyData2[,8,drop=FALSE]
> 
> X= as.matrix(as.data.frame(lapply(X, as.numeric)))
> typeof(X)
[1] "double"
> typeof(Y)
[1] "list"
> Y= as.matrix(as.data.frame(lapply(Y, as.numeric)))
> 
> X2= as.matrix(as.data.frame(lapply(X2, as.numeric)))
> Y2= as.matrix(as.data.frame(lapply(Y2, as.numeric)))
> 
> anfis3 <- new(Class="ANFIS",X,Y,membershipFunction)
> 
> trainOutput <- trainHybridJangOffLine(anfis3, epochs=10)
[1] "epoch:  1"
[1] "epoch:  2"
[1] "epoch:  3"
[1] "epoch:  4"
[1] "epoch:  5"
[1] "epoch:  6"
[1] "epoch:  7"
[1] "epoch:  8"
[1] "epoch:  9"
> 
> 
> summary(anfis3)
ANFIS network 
Trainning Set: 
         dim(x)= 279x7 
         dim(y)= 279x1 
Arquitecture:  7 ( 1x1x1x1x1x2x1 ) - 2 - 16 ( 16x1 ) - 1 
Last training error:  6.815306 

Call: trainHybridJangOffLine(object = anfis3, epochs = 10)

Statistics for Off-line training
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.815   6.816   6.816   6.816   6.816   6.817 
> coef(anfis3)
$`premises`
$`premises`$`x1m`
$`premises`$`x1m`[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.8917167  0.2492009 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x2m
$`premises`$x2m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.2992599  0.4023145 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x3m
$`premises`$x3m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
  0.5   0.4 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x4m
$`premises`$x4m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
           mu         sigma 
-1.245582e-20  1.000000e-01 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x5m
$`premises`$x5m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.1869091  0.4305641 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x6m
$`premises`$x6m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.6996602  0.4005942 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x6m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
       mu     sigma 
0.7003407 0.3994032 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x7m
$`premises`$x7m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.27  0.50 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))



$consequents
                  z
 [1,]  0.0182686142
 [2,]  0.1814707690
 [3,]  0.1843195073
 [4,] -0.2429164492
 [5,] -0.0587326296
 [6,] -0.3690851206
 [7,] -0.1256080457
 [8,] -0.2350813818
 [9,]  0.1135459097
[10,] -0.0367368266
[11,]  0.9287435454
[12,] -0.6715737615
[13,]  0.0710427212
[14,] -0.0002496709
[15,] -0.0184114546
[16,] -0.0871708405

> 
> predictedY <- predict(anfis3,X)
> err=rmse(MyData$z-predictedY)
> err
[1] 0.1562866
> 
> 
> predictedY2 <- predict(anfis3,X2)
> err2=rmse(MyData2$z-predictedY2)
> err2
[1] 1.05122
> 
> graphics.off()
> dev.new()
> 
> axislimit_u= max( max(MyData$z),max(predictedY))
> axislimit_l= min( min(MyData$z),min(predictedY),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData$z,predictedY,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("train-rmse",round(err,2)))
> 
> dev.new(xpos=100)
> 
> axislimit_u= max( max(MyData2$z),max(predictedY2))
> axislimit_l= min( min(MyData2$z),min(predictedY2),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData2$z,predictedY2,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("test-rmse=",round(err2,2)))
> 
> 
> 
> 
> 
> vars=7
> 
> 
> list_coef=coef(anfis3)$consequents
> 
> no_functions=length(list_coef)/(vars+1)
> 
> for (i in 1:no_functions)
+ {
+ if(i==1){cat("\n")}
+ str=i
+ str=paste('z',i,'=',list_coef[(i-1)*(vars+1)+vars+1], sep = '')
+ for (j in 1:vars)
+ {
+ str=paste(str,'+',list_coef[(i-1)*(vars+1)+j],'*x',j, sep = '')
+ }
+ str=paste(str,"\n")
+ cat(str)
+ if(i==no_functions){cat("\n")}
+ }

z1=-0.235081381790968+0.0182686141905915*x1+0.181470769008765*x2+0.184319507268833*x3+-0.242916449213517*x4+-0.0587326295911579*x5+-0.369085120604032*x6+-0.125608045698291*x7 
z2=-0.0871708405368996+0.11354590971109*x1+-0.0367368265688942*x2+0.928743545426279*x3+-0.671573761513367*x4+0.0710427212346497*x5+-0.000249670894908561*x6+-0.0184114546222423*x7 

> 
> 
> list_coef
                  z
 [1,]  0.0182686142
 [2,]  0.1814707690
 [3,]  0.1843195073
 [4,] -0.2429164492
 [5,] -0.0587326296
 [6,] -0.3690851206
 [7,] -0.1256080457
 [8,] -0.2350813818
 [9,]  0.1135459097
[10,] -0.0367368266
[11,]  0.9287435454
[12,] -0.6715737615
[13,]  0.0710427212
[14,] -0.0002496709
[15,] -0.0184114546
[16,] -0.0871708405
> 
> 
> for (i in 1:vars){
+ if(i==1){cat("\n")}
+ #if(length(membershipFunction[[i]])>1){
+ for (j in 1:length(membershipFunction[[i]])){
+ str=""
+ mu__=getPremises(anfis3)[[i]][[j]][1][[1]]
+ stdev__=getPremises(anfis3)[[i]][[j]][2][[1]]
+ str=paste(str,"w",i,'_',j,"=exp(-0.5*(x",i,"-",mu__,") ^ 2/",stdev__," ^ 2)",sep="")
+ cat(str,"\n")
+ }
+ cat("\n")
+ #}
+ }

w1_1=exp(-0.5*(x1--0.891716677004292) ^ 2/0.249200921610133 ^ 2) 

w2_1=exp(-0.5*(x2--1.29925994531826) ^ 2/0.40231447176804 ^ 2) 

w3_1=exp(-0.5*(x3-0.5) ^ 2/0.4 ^ 2) 

w4_1=exp(-0.5*(x4--1.2455820619584e-20) ^ 2/0.1 ^ 2) 

w5_1=exp(-0.5*(x5--1.18690911915796) ^ 2/0.430564128806682 ^ 2) 

w6_1=exp(-0.5*(x6--0.699660210382049) ^ 2/0.40059416259145 ^ 2) 
w6_2=exp(-0.5*(x6-0.700340733620413) ^ 2/0.399403243465839 ^ 2) 

w7_1=exp(-0.5*(x7-0.269999999999999) ^ 2/0.500000000000003 ^ 2) 

> 
> for (i in 1:no_functions){
+ str=paste('ww',i,'=',sep='')
+ for (j in 1:vars){
+ str=paste(str,'w',j,'_',getRules(anfis3)[i,j],sep='')
+ if(j<vars){str=paste(str,'*',sep='')}
+ }
+ cat(str,"\n")
+ }
ww1=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww2=w1_1*w2_1*w3_1*w4_1*w5_1*w6_2*w7_1 
> 
> str='\nwwN='
> str2='\nz='
> for (i in 1:no_functions){
+ str=paste(str,'ww',i,sep='')
+ str2=paste(str2,'z',i,'*ww',i,sep='')
+ if(i<no_functions){str=paste(str,'+',sep='')}
+ if(i<no_functions){str2=paste(str2,'+',sep='')}
+ }
> str=paste(str,'\n\n')
> str2=paste(str2,'\n\n')
> 
> cat(str)

wwN=ww1+ww2 

> cat(str2)

z=z1*ww1+z2*ww2 

> 
> fitted.values(anfis3)
                   z
  [1,] -0.1799539843
  [2,] -0.1699116119
  [3,] -0.1706284745
  [4,] -0.1741995448
  [5,] -0.1810230325
  [6,] -0.1626815470
  [7,] -0.1496385863
  [8,] -0.1807756567
  [9,] -0.1668341253
 [10,] -0.1680224196
 [11,] -0.1694024782
 [12,] -0.1787123786
 [13,] -0.1663312972
 [14,] -0.1765607731
 [15,] -0.0350949465
 [16,] -0.1264639026
 [17,] -0.1388253032
 [18,] -0.1521952382
 [19,] -0.1885952467
 [20,] -0.1939471938
 [21,] -0.2091505449
 [22,] -0.1302554611
 [23,] -0.1428758431
 [24,] -0.1726216068
 [25,] -0.1861068285
 [26,] -0.1921589365
 [27,] -0.1979363392
 [28,] -0.2035244917
 [29,] -0.2089863646
 [30,] -0.2143707174
 [31,] -0.2170464363
 [32,] -0.0366672160
 [33,] -0.1689352163
 [34,] -0.1135944003
 [35,] -0.1866118709
 [36,] -0.1866118709
 [37,] -0.1880439855
 [38,] -0.1950881073
 [39,] -0.1942274706
 [40,] -0.1944932014
 [41,] -0.1933579196
 [42,] -0.1543682542
 [43,] -0.1533262226
 [44,] -0.1575177024
 [45,] -0.1550662478
 [46,] -0.1578177815
 [47,] -0.1599999576
 [48,] -0.2156237567
 [49,] -0.2162471187
 [50,] -0.2182170964
 [51,] -0.2144933848
 [52,] -0.2135945732
 [53,] -0.2110016193
 [54,] -0.2184151757
 [55,] -0.2154677710
 [56,] -0.2132668240
 [57,] -0.2134603363
 [58,] -0.2119742496
 [59,] -0.2178220364
 [60,] -0.2151396845
 [61,] -0.2185067397
 [62,] -0.2165108761
 [63,] -0.2198643833
 [64,] -0.2122497962
 [65,] -0.2099308288
 [66,] -0.1042096911
 [67,] -0.1167030303
 [68,] -0.0887285787
 [69,] -0.0920417020
 [70,] -0.0954243317
 [71,] -0.0967740540
 [72,] -0.0944266772
 [73,] -0.0612254752
 [74,] -0.0556954766
 [75,] -0.0585291062
 [76,] -0.2302482134
 [77,] -0.2300281110
 [78,] -0.0861061940
 [79,] -0.0901252026
 [80,] -0.0936393682
 [81,] -0.1905028577
 [82,] -0.1915975821
 [83,] -0.1941504703
 [84,] -0.1104637787
 [85,] -0.1503574051
 [86,] -0.1348882826
 [87,] -0.1206679521
 [88,] -0.1240845254
 [89,] -0.0835920693
 [90,] -0.0815764228
 [91,] -0.1613757481
 [92,] -0.0841546867
 [93,] -0.0916305874
 [94,] -0.0975859217
 [95,] -0.1288630713
 [96,] -0.1400496017
 [97,] -0.1333360347
 [98,] -0.1336121433
 [99,] -0.1533279711
[100,] -0.1256423535
[101,] -0.1232843670
[102,] -0.1214511048
[103,]  0.1265005591
[104,]  0.1333089001
[105,] -0.1149334517
[106,] -0.1117085723
[107,] -0.1822180574
[108,] -0.1786412871
[109,]  0.0610535288
[110,] -0.1226275010
[111,] -0.1207556307
[112,] -0.1226275010
[113,] -0.1207556307
[114,] -0.1210513145
[115,] -0.1223544914
[116,] -0.1897256335
[117,] -0.1847042025
[118,] -0.1851065350
[119,] -0.1869160054
[120,] -0.1870211061
[121,] -0.1876462602
[122,] -0.1862650907
[123,] -0.1870096808
[124,] -0.1833592362
[125,] -0.1870902272
[126,] -0.1540681826
[127,] -0.1522366163
[128,] -0.1528797410
[129,] -0.1499299702
[130,] -0.1534209859
[131,] -0.2099192440
[132,] -0.2114070491
[133,] -0.2074339627
[134,] -0.2101043219
[135,] -0.2101043219
[136,] -0.2076514785
[137,] -0.2078595888
[138,] -0.2123873339
[139,] -0.2073350250
[140,] -0.2078907766
[141,] -0.1317888302
[142,] -0.1433665781
[143,] -0.0586797522
[144,] -0.0594350030
[145,] -0.2313713899
[146,] -0.2306943594
[147,] -0.0824278306
[148,] -0.1833645362
[149,] -0.1842389564
[150,] -0.1855723680
[151,] -0.1873836870
[152,] -0.1867030679
[153,] -0.1084201863
[154,] -0.1175010618
[155,] -0.1193009759
[156,] -0.0901622858
[157,] -0.0959214797
[158,] -0.0970144301
[159,] -0.1163033561
[160,] -0.1220625500
[161,] -0.1231555004
[162,] -0.1589857605
[163,] -0.1635364808
[164,] -0.1698665501
[165,] -0.1436646701
[166,] -0.1464870538
[167,] -0.1475800043
[168,] -0.1256427987
[169,] -0.1270249597
[170,] -0.0803915226
[171,] -0.0789925464
[172,] -0.1673928239
[173,] -0.1701337189
[174,] -0.1741501850
[175,] -0.1270446769
[176,] -0.0997822866
[177,] -0.1057253914
[178,] -0.0927762311
[179,] -0.1053404949
[180,] -0.1237267717
[181,] -0.0815698404
[182,] -0.1457762234
[183,] -0.1405307341
[184,] -0.1283646858
[185,] -0.1611973174
[186,] -0.1777788722
[187,] -0.1621508943
[188,] -0.1384011743
[189,] -0.1407927858
[190,] -0.1483004374
[191,] -0.1390120438
[192,] -0.4189553203
[193,] -0.1552506192
[194,] -0.1430118402
[195,] -0.1621508943
[196,] -0.1677151766
[197,] -0.1498012911
[198,]  0.0017151536
[199,] -0.0006900045
[200,] -0.0033684392
[201,] -0.0060565254
[202,] -0.0114747618
[203,] -0.0142112877
[204,] -0.0169702725
[205,] -0.0197548481
[206,] -0.0225681678
[207,] -0.0254134303
[208,] -0.0312129420
[209,] -0.0402369286
[210,] -0.1204864282
[211,] -0.1187048068
[212,] -0.1168903793
[213,] -0.0543468288
[214,]  0.1357367667
[215,]  0.1363794175
[216,]  0.1381964982
[217,] -0.1499423579
[218,] -0.1766062020
[219,] -0.1743670032
[220,]  0.0676899398
[221,] -0.1466311944
[222,] -0.1824372829
[223,] -0.1160982303
[224,] -0.0990204189
[225,] -0.1465980853
[226,] -0.1468237427
[227,] -0.1514525959
[228,] -0.2106812671
[229,] -0.1874136408
[230,] -0.2037993482
[231,] -0.1472228203
[232,] -0.1506712874
[233,] -0.1733457943
[234,] -0.0628626416
[235,] -0.0970378999
[236,] -0.0970724458
[237,] -0.0943496983
[238,] -0.0968268156
[239,]  0.0078586712
[240,] -0.0558521388
[241,] -0.0577565337
[242,] -0.0122597514
[243,] -0.0404529652
[244,] -0.0453804828
[245,] -0.0485317533
[246,] -0.1689874138
[247,] -0.2013881593
[248,] -0.2320617989
[249,] -0.2317580342
[250,] -0.0608748323
[251,] -0.0790014011
[252,] -0.0799758182
[253,] -0.1267920551
[254,] -0.1711605978
[255,] -0.1817887124
[256,] -0.1427095946
[257,] -0.3453770658
[258,] -0.1025454865
[259,] -0.1286865568
[260,] -0.1358636476
[261,] -0.1801124275
[262,] -0.1932751688
[263,] -0.1781177781
[264,] -0.1578539503
[265,] -0.1077141176
[266,] -0.1118863102
[267,] -0.1175613792
[268,] -0.2239200832
[269,] -0.2122510306
[270,] -0.1811014546
[271,] -0.1070651653
[272,] -0.0736115433
[273,]  0.1466778764
[274,] -0.0949249054
[275,] -0.1842317748
[276,] -0.1647645148
[277,] -0.1579307687
[278,] -0.1338900810
[279,]  0.1129410667
> 
> plotMFs(anfis3)
> 
