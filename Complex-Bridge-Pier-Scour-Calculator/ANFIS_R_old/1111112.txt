> 
> setwd("C:/Users/Computer Emergency/Desktop/scourpaper/Complex-Bridge-Pier-Scour-Calculator-1.0/ANFIS-r files")  #set working folder
> 
> rmse <- function(error)
+ {
+   sqrt(mean(error^2))
+ }
> #x1 log(bpg/bpc+.05)x2 log(bcol/bpc+.05)x3 log(h0/y+2.1)x4 log(h1/y+1.55)
> #x5 log(T/y+.05)x6 log(bpc/y)x7 log(f1/bcol+.05)z log(be/b*+.05)
> 
> MyData = read.csv("anfis-log_x_b3.txt",header=TRUE)
> MyData2 = read.csv("test_data.txt",header=TRUE)
> 
> 
> library("anfis")
> require("parallel")
> if(.Platform$OS.type == "windows"){
+ options(mc.cores=5)
+ }else{
+ options(mc.cores=5) 
+ }
> 
> membershipFunction<-list(
+ x1m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.91,sigma=.8))),
+ 
+ x2m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.8))),
+ 
+ x3m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.5,sigma=0.8))),
+ 
+ x4m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.00,sigma=0.8))),
+ 
+ x5m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.2,sigma=0.8))),
+ 
+ x6m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.7,sigma=0.8))),
+ 
+ x7m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.4)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.27,sigma=0.4))))
> 
> X=MyData[,1:7]
> Y=MyData[,8,drop=FALSE]
> 
> X2=MyData2[,1:7]
> Y2=MyData2[,8,drop=FALSE]
> 
> X= as.matrix(as.data.frame(lapply(X, as.numeric)))
> typeof(X)
[1] "double"
> typeof(Y)
[1] "list"
> Y= as.matrix(as.data.frame(lapply(Y, as.numeric)))
> 
> X2= as.matrix(as.data.frame(lapply(X2, as.numeric)))
> Y2= as.matrix(as.data.frame(lapply(Y2, as.numeric)))
> 
> anfis3 <- new(Class="ANFIS",X,Y,membershipFunction)
> 
> trainOutput <- trainHybridJangOffLine(anfis3, epochs=10)
[1] "epoch:  1"
[1] "epoch:  2"
[1] "epoch:  3"
[1] "epoch:  4"
[1] "epoch:  5"
[1] "epoch:  6"
[1] "epoch:  7"
[1] "epoch:  8"
[1] "epoch:  9"
> 
> 
> summary(anfis3)
ANFIS network 
Trainning Set: 
         dim(x)= 279x7 
         dim(y)= 279x1 
Arquitecture:  7 ( 1x1x1x1x1x1x2 ) - 2 - 16 ( 16x1 ) - 1 
Last training error:  6.226391 

Call: trainHybridJangOffLine(object = anfis3, epochs = 10)

Statistics for Off-line training
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.181   6.195   6.209   6.235   6.221   6.479 
> coef(anfis3)
$`premises`
$`premises`$`x1m`
$`premises`$`x1m`[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.9279526  0.7785702 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x2m
$`premises`$x2m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.3298297  0.7508119 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x3m
$`premises`$x3m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
       mu     sigma 
0.5018372 0.7982752 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x4m
$`premises`$x4m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
          mu        sigma 
-0.001089505  0.799163547 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x5m
$`premises`$x5m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.2100972  0.7752534 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x6m
$`premises`$x6m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.7070094  0.7977448 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x7m
$`premises`$x7m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.2416036  0.5128629 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x7m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
       mu     sigma 
0.3381254 0.2549376 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))



$consequents
                 z
 [1,]  0.118314840
 [2,]  0.078760579
 [3,]  0.258783782
 [4,] -0.359985998
 [5,] -0.001985773
 [6,] -0.218141888
 [7,]  0.001313451
 [8,] -0.018564228
 [9,] -0.523673085
[10,]  0.080314755
[11,]  2.345529752
[12,] -1.484303423
[13,]  0.175421077
[14,]  0.353653103
[15,]  0.512593366
[16,] -0.577965640

> 
> predictedY <- predict(anfis3,X)
> err=rmse(MyData$z-predictedY)
> err
[1] 0.1494627
> 
> 
> predictedY2 <- predict(anfis3,X2)
> err2=rmse(MyData2$z-predictedY2)
> err2
[1] 1.481851
> 
> graphics.off()
> dev.new()
> 
> axislimit_u= max( max(MyData$z),max(predictedY))
> axislimit_l= min( min(MyData$z),min(predictedY),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData$z,predictedY,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("train-rmse",round(err,2)))
> 
> dev.new(xpos=100)
> 
> axislimit_u= max( max(MyData2$z),max(predictedY2))
> axislimit_l= min( min(MyData2$z),min(predictedY2),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData2$z,predictedY2,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("test-rmse=",round(err2,2)))
> 
> 
> 
> 
> 
> vars=7
> 
> 
> list_coef=coef(anfis3)$consequents
> 
> no_functions=length(list_coef)/(vars+1)
> 
> for (i in 1:no_functions)
+ {
+ if(i==1){cat("\n")}
+ str=i
+ str=paste('z',i,'=',list_coef[(i-1)*(vars+1)+vars+1], sep = '')
+ for (j in 1:vars)
+ {
+ str=paste(str,'+',list_coef[(i-1)*(vars+1)+j],'*x',j, sep = '')
+ }
+ str=paste(str,"\n")
+ cat(str)
+ if(i==no_functions){cat("\n")}
+ }

z1=-0.0185642278723111+0.118314839743816*x1+0.0787605793934511*x2+0.258783781576921*x3+-0.359985998189298*x4+-0.00198577337955769*x5+-0.218141888329058*x6+0.00131345093404914*x7 
z2=-0.577965640404982+-0.523673084697001*x1+0.0803147553274765*x2+2.34552975162446*x3+-1.48430342293133*x4+0.175421076623558*x5+0.353653103208444*x6+0.512593365999011*x7 

> 
> 
> list_coef
                 z
 [1,]  0.118314840
 [2,]  0.078760579
 [3,]  0.258783782
 [4,] -0.359985998
 [5,] -0.001985773
 [6,] -0.218141888
 [7,]  0.001313451
 [8,] -0.018564228
 [9,] -0.523673085
[10,]  0.080314755
[11,]  2.345529752
[12,] -1.484303423
[13,]  0.175421077
[14,]  0.353653103
[15,]  0.512593366
[16,] -0.577965640
> 
> 
> for (i in 1:vars){
+ if(i==1){cat("\n")}
+ #if(length(membershipFunction[[i]])>1){
+ for (j in 1:length(membershipFunction[[i]])){
+ str=""
+ mu__=getPremises(anfis3)[[i]][[j]][1][[1]]
+ stdev__=getPremises(anfis3)[[i]][[j]][2][[1]]
+ str=paste(str,"w",i,'_',j,"=exp(-0.5*(x",i,"-",mu__,") ^ 2/",stdev__," ^ 2)",sep="")
+ cat(str,"\n")
+ }
+ cat("\n")
+ #}
+ }

w1_1=exp(-0.5*(x1--0.927952601739515) ^ 2/0.778570214915861 ^ 2) 

w2_1=exp(-0.5*(x2--1.32982973958953) ^ 2/0.750811874608747 ^ 2) 

w3_1=exp(-0.5*(x3-0.501837160713842) ^ 2/0.798275152617912 ^ 2) 

w4_1=exp(-0.5*(x4--0.00108950544335326) ^ 2/0.799163547191792 ^ 2) 

w5_1=exp(-0.5*(x5--1.21009723653663) ^ 2/0.775253413535807 ^ 2) 

w6_1=exp(-0.5*(x6--0.707009416077423) ^ 2/0.797744801484123 ^ 2) 

w7_1=exp(-0.5*(x7--1.24160360476847) ^ 2/0.51286294455598 ^ 2) 
w7_2=exp(-0.5*(x7-0.338125402795995) ^ 2/0.254937591734867 ^ 2) 

> 
> for (i in 1:no_functions){
+ str=paste('ww',i,'=',sep='')
+ for (j in 1:vars){
+ str=paste(str,'w',j,'_',getRules(anfis3)[i,j],sep='')
+ if(j<vars){str=paste(str,'*',sep='')}
+ }
+ cat(str,"\n")
+ }
ww1=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww2=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_2 
> 
> str='\nwwN='
> str2='\nz='
> for (i in 1:no_functions){
+ str=paste(str,'ww',i,sep='')
+ str2=paste(str2,'z',i,'*ww',i,sep='')
+ if(i<no_functions){str=paste(str,'+',sep='')}
+ if(i<no_functions){str2=paste(str2,'+',sep='')}
+ }
> str=paste(str,'\n\n')
> str2=paste(str2,'\n\n')
> 
> cat(str)

wwN=ww1+ww2 

> cat(str2)

z=z1*ww1+z2*ww2 

> 
> fitted.values(anfis3)
                  z
  [1,] -0.156845965
  [2,] -0.154966132
  [3,] -0.150415931
  [4,] -0.148803579
  [5,] -0.155711596
  [6,] -0.148270762
  [7,] -0.148077715
  [8,] -0.141272408
  [9,] -0.136497446
 [10,] -0.147887042
 [11,] -0.150565973
 [12,] -0.158565505
 [13,] -0.139229890
 [14,] -0.142616350
 [15,] -0.243331988
 [16,] -0.191576839
 [17,] -0.198072518
 [18,] -0.204847531
 [19,] -0.147184296
 [20,] -0.121217533
 [21,] -0.131135276
 [22,] -0.220505270
 [23,] -0.100782569
 [24,] -0.110817813
 [25,] -0.117696427
 [26,] -0.121254562
 [27,] -0.124907183
 [28,] -0.128664421
 [29,] -0.132536236
 [30,] -0.136532836
 [31,] -0.138581261
 [32,] -0.250509661
 [33,] -0.128145425
 [34,] -0.196770937
 [35,] -0.198988941
 [36,] -0.198988941
 [37,] -0.194415057
 [38,] -0.178408400
 [39,] -0.162079165
 [40,] -0.163572537
 [41,] -0.164861721
 [42,] -0.163103885
 [43,] -0.160335069
 [44,] -0.137078516
 [45,] -0.142818484
 [46,] -0.139625502
 [47,] -0.134398184
 [48,] -0.203481787
 [49,] -0.197906375
 [50,] -0.178841552
 [51,] -0.217109714
 [52,] -0.228559967
 [53,] -0.248845214
 [54,] -0.159418019
 [55,] -0.184256869
 [56,] -0.228411972
 [57,] -0.231802622
 [58,] -0.244492572
 [59,] -0.182995490
 [60,] -0.199878798
 [61,] -0.161131767
 [62,] -0.177312647
 [63,] -0.146530080
 [64,] -0.236128748
 [65,] -0.253194899
 [66,] -0.017319428
 [67,] -0.066389448
 [68,] -0.006505057
 [69,] -0.028233740
 [70,] -0.055753323
 [71,] -0.073085926
 [72,] -0.046567511
 [73,] -0.047627052
 [74,] -0.024408415
 [75,] -0.031316783
 [76,] -0.043741787
 [77,] -0.027062291
 [78,] -0.101133397
 [79,] -0.082511459
 [80,] -0.064585831
 [81,] -0.109600757
 [82,] -0.096436868
 [83,] -0.064371271
 [84,] -0.099387952
 [85,] -0.146256385
 [86,] -0.133528376
 [87,] -0.122552414
 [88,] -0.120640156
 [89,] -0.045228024
 [90,] -0.036578929
 [91,] -0.192365623
 [92,]  0.025936887
 [93,] -0.008816742
 [94,] -0.037467421
 [95,] -0.150467424
 [96,] -0.144583950
 [97,] -0.119030516
 [98,] -0.118737468
 [99,] -0.125987827
[100,] -0.091153730
[101,] -0.089055432
[102,] -0.087349248
[103,]  0.031407868
[104,]  0.042453872
[105,]  0.011862103
[106,]  0.024513722
[107,] -0.222515945
[108,] -0.247650734
[109,]  0.051326799
[110,] -0.087533673
[111,] -0.085582414
[112,] -0.087533673
[113,] -0.085582414
[114,] -0.087389773
[115,] -0.088204956
[116,] -0.214897008
[117,] -0.208473792
[118,] -0.215182751
[119,] -0.212260067
[120,] -0.211743080
[121,] -0.211530724
[122,] -0.209678671
[123,] -0.208939876
[124,] -0.206009852
[125,] -0.202600883
[126,] -0.172863086
[127,] -0.173436057
[128,] -0.170436771
[129,] -0.168451975
[130,] -0.167834642
[131,] -0.256104524
[132,] -0.236233042
[133,] -0.259768117
[134,] -0.238867146
[135,] -0.238867146
[136,] -0.269230162
[137,] -0.269186262
[138,] -0.208031005
[139,] -0.271148405
[140,] -0.267514722
[141,] -0.125641862
[142,] -0.171115719
[143,] -0.035043223
[144,] -0.038334208
[145,] -0.136946131
[146,] -0.078899814
[147,] -0.116458199
[148,] -0.187000786
[149,] -0.178289186
[150,] -0.164597974
[151,] -0.145201115
[152,] -0.152598445
[153,] -0.093986670
[154,] -0.088048297
[155,] -0.086922966
[156,] -0.084928463
[157,] -0.077438989
[158,] -0.075983532
[159,] -0.092279832
[160,] -0.085015695
[161,] -0.083603496
[162,] -0.149186935
[163,] -0.150808844
[164,] -0.153156148
[165,] -0.133989840
[166,] -0.134071861
[167,] -0.134093363
[168,] -0.119481471
[169,] -0.118225231
[170,] -0.031890675
[171,] -0.026669119
[172,] -0.232316481
[173,] -0.250690096
[174,] -0.277848932
[175,] -0.109765390
[176,] -0.048321361
[177,] -0.078760836
[178,] -0.044927711
[179,] -0.055689193
[180,] -0.072478719
[181,] -0.031981564
[182,] -0.164011352
[183,] -0.154341878
[184,] -0.123130064
[185,] -0.254271748
[186,] -0.268958564
[187,] -0.248368910
[188,] -0.197990369
[189,] -0.176658995
[190,] -0.161926060
[191,] -0.182839065
[192,] -0.516409216
[193,] -0.238115684
[194,] -0.215033431
[195,] -0.248368910
[196,] -0.256015422
[197,] -0.159503311
[198,] -0.038860812
[199,] -0.040805449
[200,] -0.043004120
[201,] -0.045244388
[202,] -0.049856939
[203,] -0.052233090
[204,] -0.054658593
[205,] -0.057135684
[206,] -0.059666742
[207,] -0.062254301
[208,] -0.067609938
[209,] -0.076141357
[210,] -0.086426448
[211,] -0.084678882
[212,] -0.082844028
[213,] -0.275746975
[214,]  0.046373659
[215,]  0.047409561
[216,]  0.050334845
[217,] -0.125482359
[218,] -0.260876984
[219,] -0.274555174
[220,]  0.059702266
[221,] -0.218111728
[222,] -0.218682238
[223,] -0.176811402
[224,] -0.167523437
[225,] -0.185575836
[226,] -0.198467607
[227,] -0.192408520
[228,]  0.084344248
[229,] -0.258620646
[230,] -0.256466703
[231,] -0.186261860
[232,] -0.199806385
[233,] -0.288864921
[234,] -0.089212653
[235,] -0.080354985
[236,] -0.083886780
[237,] -0.105315289
[238,] -0.091967068
[239,]  0.089910443
[240,] -0.024535341
[241,] -0.031345704
[242,]  0.058431229
[243,]  0.008434388
[244,] -0.001532582
[245,] -0.008198339
[246,] -0.111286908
[247,] -0.148034863
[248,] -0.206082994
[249,] -0.173921706
[250,] -0.134988769
[251,] -0.129295080
[252,] -0.125783308
[253,] -0.193399037
[254,] -0.227450148
[255,] -0.202174657
[256,] -0.073916919
[257,] -0.015170848
[258,] -0.068418372
[259,] -0.076260137
[260,] -0.066119330
[261,] -0.157188105
[262,] -0.162803136
[263,] -0.349997301
[264,] -0.230310562
[265,] -0.089405920
[266,] -0.112854371
[267,] -0.149160034
[268,] -0.296430556
[269,] -0.299358584
[270,] -0.270109331
[271,] -0.072065683
[272,] -0.045960858
[273,]  0.054463809
[274,] -0.090534793
[275,] -0.260004172
[276,] -0.183631595
[277,] -0.156821927
[278,] -0.274644617
[279,]  0.085234242
> 
> plotMFs(anfis3)
> 
