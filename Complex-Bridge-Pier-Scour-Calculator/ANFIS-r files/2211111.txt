> 
> setwd("C:/Users/Computer Emergency/Desktop/scourpaper/Complex-Bridge-Pier-Scour-Calculator-1.0/ANFIS-r files")  #set working folder
> 
> rmse <- function(error)
+ {
+   sqrt(mean(error^2))
+ }
> #x1 log(bpg/bpc+.05)x2 log(bcol/bpc+.05)x3 log(h0/y+2.1)x4 log(h1/y+1.55)
> #x5 log(T/y+.05)x6 log(bpc/y)x7 log(f1/bcol+.05)z log(be/b*+.05)
> 
> MyData = read.csv("anfis-log_x_b3.txt",header=TRUE)
> MyData2 = read.csv("test_data.txt",header=TRUE)
> 
> 
> library("anfis")
> require("parallel")
> if(.Platform$OS.type == "windows"){
+ options(mc.cores=5)
+ }else{
+ options(mc.cores=5) 
+ }
> 
> membershipFunction<-list(
+ x1m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.91,sigma=.2)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=-.25,sigma=.2))),
+ 
+ x2m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.4)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.02,sigma=0.4))),
+ 
+ x3m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.29,sigma=0.80))),
+ 
+ x4m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.00,sigma=0.1))),
+ 
+ x5m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.48,sigma=0.50))),
+ 
+ x6m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.13,sigma=0.78))),
+ 
+ x7m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.27,sigma=0.5))))
> 
> X=MyData[,1:7]
> Y=MyData[,8,drop=FALSE]
> 
> X2=MyData2[,1:7]
> Y2=MyData2[,8,drop=FALSE]
> 
> X= as.matrix(as.data.frame(lapply(X, as.numeric)))
> typeof(X)
[1] "double"
> typeof(Y)
[1] "list"
> Y= as.matrix(as.data.frame(lapply(Y, as.numeric)))
> 
> X2= as.matrix(as.data.frame(lapply(X2, as.numeric)))
> Y2= as.matrix(as.data.frame(lapply(Y2, as.numeric)))
> 
> anfis3 <- new(Class="ANFIS",X,Y,membershipFunction)
> 
> trainOutput <- trainHybridJangOffLine(anfis3, epochs=10)
[1] "epoch:  1"
[1] "epoch:  2"
[1] "epoch:  3"
[1] "epoch:  4"
[1] "epoch:  5"
[1] "epoch:  6"
[1] "epoch:  7"
[1] "epoch:  8"
[1] "epoch:  9"
> 
> 
> summary(anfis3)
ANFIS network 
Trainning Set: 
         dim(x)= 279x7 
         dim(y)= 279x1 
Arquitecture:  7 ( 2x2x1x1x1x1x1 ) - 4 - 32 ( 32x1 ) - 1 
Last training error:  5.946345 

Call: trainHybridJangOffLine(object = anfis3, epochs = 10)

Statistics for Off-line training
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  5.891   5.902   5.914   5.916   5.929   5.946 
> coef(anfis3)
$`premises`
$`premises`$`x1m`
$`premises`$`x1m`[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.9107921  0.1975894 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$`x1m`[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.2497982  0.1999445 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x2m
$`premises`$x2m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.3192615  0.3344115 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x2m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
0.01677611 0.40051817 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x3m
$`premises`$x3m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.29  0.80 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x4m
$`premises`$x4m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
           mu         sigma 
-1.560815e-22  1.000000e-01 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x5m
$`premises`$x5m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.4805365  0.4997305 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x6m
$`premises`$x6m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.1287838  0.7802018 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x7m
$`premises`$x7m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.27  0.50 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))



$consequents
                z
 [1,]  0.76978688
 [2,]  0.77840704
 [3,] -0.65093659
 [4,] -0.65313361
 [5,] -2.08651846
 [6,]  2.96940545
 [7,] -2.52973228
 [8,] -3.14801258
 [9,]  0.99752255
[10,] -5.36206751
[11,]  2.42215626
[12,] -0.94934128
[13,] -0.52528199
[14,]  1.39923858
[15,] -0.74674153
[16,] -1.33071392
[17,] -0.06719840
[18,]  2.50846625
[19,]  0.95222445
[20,]  3.84764624
[21,]  0.12613463
[22,]  0.13163145
[23,] -0.97921353
[24,] -0.08872553
[25,]  0.70921164
[26,]  0.23194570
[27,]  0.43344951
[28,] -0.49587875
[29,] -0.02053482
[30,] -0.11944816
[31,] -0.02716769
[32,]  0.10786414

> 
> predictedY <- predict(anfis3,X)
> err=rmse(MyData$z-predictedY)
> err
[1] 0.1463615
> 
> 
> predictedY2 <- predict(anfis3,X2)
> err2=rmse(MyData2$z-predictedY2)
> err2
[1] 0.5997399
> 
> graphics.off()
> dev.new()
> 
> axislimit_u= max( max(MyData$z),max(predictedY))
> axislimit_l= min( min(MyData$z),min(predictedY),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData$z,predictedY,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("train-rmse",round(err,2)))
> 
> dev.new(xpos=100)
> 
> axislimit_u= max( max(MyData2$z),max(predictedY2))
> axislimit_l= min( min(MyData2$z),min(predictedY2),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData2$z,predictedY2,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("test-rmse=",round(err2,2)))
> 
> 
> 
> 
> 
> vars=7
> 
> 
> list_coef=coef(anfis3)$consequents
> 
> no_functions=length(list_coef)/(vars+1)
> 
> for (i in 1:no_functions)
+ {
+ if(i==1){cat("\n")}
+ str=i
+ str=paste('z',i,'=',list_coef[(i-1)*(vars+1)+vars+1], sep = '')
+ for (j in 1:vars)
+ {
+ str=paste(str,'+',list_coef[(i-1)*(vars+1)+j],'*x',j, sep = '')
+ }
+ str=paste(str,"\n")
+ cat(str)
+ if(i==no_functions){cat("\n")}
+ }

z1=-3.14801258165313+0.76978687562216*x1+0.778407041643924*x2+-0.650936585659595*x3+-0.653133606390431*x4+-2.08651845692297*x5+2.96940545201756*x6+-2.52973227646651*x7 
z2=-1.33071392180748+0.997522549027466*x1+-5.36206751316476*x2+2.42215626086203*x3+-0.949341276253134*x4+-0.525281990402319*x5+1.39923858204957*x6+-0.746741534823867*x7 
z3=-0.0887255280255733+-0.0671983985125299*x1+2.50846625418299*x2+0.952224454242133*x3+3.84764623894071*x4+0.126134630298126*x5+0.131631448487206*x6+-0.979213526336099*x7 
z4=0.107864143340804+0.709211643572286*x1+0.231945696987942*x2+0.433449512620964*x3+-0.495878750539364*x4+-0.0205348153123815*x5+-0.119448162638003*x6+-0.0271676911455816*x7 

> 
> 
> list_coef
                z
 [1,]  0.76978688
 [2,]  0.77840704
 [3,] -0.65093659
 [4,] -0.65313361
 [5,] -2.08651846
 [6,]  2.96940545
 [7,] -2.52973228
 [8,] -3.14801258
 [9,]  0.99752255
[10,] -5.36206751
[11,]  2.42215626
[12,] -0.94934128
[13,] -0.52528199
[14,]  1.39923858
[15,] -0.74674153
[16,] -1.33071392
[17,] -0.06719840
[18,]  2.50846625
[19,]  0.95222445
[20,]  3.84764624
[21,]  0.12613463
[22,]  0.13163145
[23,] -0.97921353
[24,] -0.08872553
[25,]  0.70921164
[26,]  0.23194570
[27,]  0.43344951
[28,] -0.49587875
[29,] -0.02053482
[30,] -0.11944816
[31,] -0.02716769
[32,]  0.10786414
> 
> 
> for (i in 1:vars){
+ if(i==1){cat("\n")}
+ #if(length(membershipFunction[[i]])>1){
+ for (j in 1:length(membershipFunction[[i]])){
+ str=""
+ mu__=getPremises(anfis3)[[i]][[j]][1][[1]]
+ stdev__=getPremises(anfis3)[[i]][[j]][2][[1]]
+ str=paste(str,"w",i,'_',j,"=exp(-0.5*(x",i,"-",mu__,") ^ 2/",stdev__," ^ 2)",sep="")
+ cat(str,"\n")
+ }
+ cat("\n")
+ #}
+ }

w1_1=exp(-0.5*(x1--0.910792056929969) ^ 2/0.197589424060353 ^ 2) 
w1_2=exp(-0.5*(x1--0.249798199228945) ^ 2/0.199944527725482 ^ 2) 

w2_1=exp(-0.5*(x2--1.31926153298091) ^ 2/0.334411506890926 ^ 2) 
w2_2=exp(-0.5*(x2-0.016776114101873) ^ 2/0.400518174781394 ^ 2) 

w3_1=exp(-0.5*(x3-0.29) ^ 2/0.8 ^ 2) 

w4_1=exp(-0.5*(x4--1.56081467093533e-22) ^ 2/0.1 ^ 2) 

w5_1=exp(-0.5*(x5--0.480536488502721) ^ 2/0.499730521972627 ^ 2) 

w6_1=exp(-0.5*(x6--0.128783827549243) ^ 2/0.780201835659129 ^ 2) 

w7_1=exp(-0.5*(x7-0.27) ^ 2/0.5 ^ 2) 

> 
> for (i in 1:no_functions){
+ str=paste('ww',i,'=',sep='')
+ for (j in 1:vars){
+ str=paste(str,'w',j,'_',getRules(anfis3)[i,j],sep='')
+ if(j<vars){str=paste(str,'*',sep='')}
+ }
+ cat(str,"\n")
+ }
ww1=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww2=w1_1*w2_2*w3_1*w4_1*w5_1*w6_1*w7_1 
ww3=w1_2*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww4=w1_2*w2_2*w3_1*w4_1*w5_1*w6_1*w7_1 
> 
> str='\nwwN='
> str2='\nz='
> for (i in 1:no_functions){
+ str=paste(str,'ww',i,sep='')
+ str2=paste(str2,'z',i,'*ww',i,sep='')
+ if(i<no_functions){str=paste(str,'+',sep='')}
+ if(i<no_functions){str2=paste(str2,'+',sep='')}
+ }
> str=paste(str,'\n\n')
> str2=paste(str2,'\n\n')
> 
> cat(str)

wwN=ww1+ww2+ww3+ww4 

> cat(str2)

z=z1*ww1+z2*ww2+z3*ww3+z4*ww4 

> 
> fitted.values(anfis3)
                  z
  [1,] -0.184555626
  [2,] -0.166136492
  [3,] -0.177756410
  [4,] -0.190337774
  [5,] -0.217582821
  [6,] -0.181493840
  [7,] -0.143148588
  [8,] -0.129183813
  [9,] -0.139452076
 [10,] -0.165307715
 [11,] -0.162203628
 [12,] -0.158193573
 [13,] -0.138281560
 [14,] -0.129283704
 [15,] -0.073735587
 [16,] -0.099619255
 [17,] -0.105732815
 [18,] -0.117445447
 [19,] -0.124597535
 [20,] -0.153595702
 [21,] -0.172996274
 [22,] -0.222470669
 [23,] -0.162817863
 [24,] -0.145481411
 [25,] -0.151335014
 [26,] -0.156735404
 [27,] -0.163397834
 [28,] -0.171162412
 [29,] -0.179926006
 [30,] -0.189623434
 [31,] -0.194809551
 [32,] -0.024183068
 [33,] -0.175989515
 [34,] -0.148051703
 [35,] -0.140865770
 [36,] -0.140865770
 [37,] -0.133147070
 [38,] -0.110923675
 [39,] -0.078865644
 [40,] -0.082029095
 [41,] -0.082781298
 [42,] -0.168146681
 [43,] -0.166755270
 [44,] -0.159444880
 [45,] -0.160762350
 [46,] -0.160525240
 [47,] -0.159354757
 [48,] -0.229330763
 [49,] -0.209426006
 [50,] -0.143222397
 [51,] -0.060256042
 [52,] -0.102056611
 [53,] -0.171868236
 [54,] -0.204021571
 [55,] -0.282698215
 [56,] -0.188932448
 [57,] -0.118033209
 [58,] -0.162026082
 [59,] -0.149390683
 [60,] -0.203955902
 [61,] -0.201534644
 [62,] -0.249680138
 [63,] -0.154934322
 [64,] -0.212400596
 [65,] -0.267233697
 [66,] -0.162171093
 [67,] -0.178869834
 [68,] -0.052777163
 [69,] -0.061292634
 [70,] -0.072488541
 [71,] -0.079934487
 [72,] -0.068685033
 [73,] -0.034279923
 [74,] -0.023433388
 [75,] -0.029162917
 [76,] -0.180588844
 [77,] -0.174653578
 [78,] -0.036594045
 [79,]  0.010761231
 [80,]  0.054741952
 [81,] -0.129649555
 [82,] -0.130470184
 [83,] -0.132310748
 [84,] -0.127140225
 [85,] -0.164057647
 [86,] -0.148033864
 [87,] -0.131835793
 [88,] -0.127618693
 [89,] -0.047445095
 [90,] -0.041355723
 [91,] -0.165670990
 [92,] -0.119472576
 [93,] -0.132060648
 [94,] -0.142543892
 [95,] -0.139998202
 [96,] -0.138271932
 [97,] -0.136925434
 [98,] -0.136255033
 [99,] -0.132740985
[100,] -0.133606269
[101,] -0.143059354
[102,] -0.149836448
[103,]  0.115551738
[104,]  0.078703562
[105,]  0.054206374
[106,]  0.062333527
[107,] -0.151473980
[108,] -0.178548253
[109,]  0.082082134
[110,] -0.148160887
[111,] -0.154566418
[112,] -0.148160887
[113,] -0.154566418
[114,] -0.140500178
[115,] -0.140192281
[116,] -0.177139838
[117,] -0.158642945
[118,] -0.173349605
[119,] -0.168790668
[120,] -0.167796186
[121,] -0.167958668
[122,] -0.162695618
[123,] -0.161872442
[124,] -0.152157903
[125,] -0.148769940
[126,] -0.171666292
[127,] -0.171244007
[128,] -0.170356172
[129,] -0.168644243
[130,] -0.169578157
[131,] -0.318013540
[132,] -0.352642893
[133,] -0.325902578
[134,] -0.347611849
[135,] -0.347611849
[136,] -0.323180146
[137,] -0.325836913
[138,] -0.352764507
[139,] -0.331442403
[140,] -0.318098652
[141,] -0.199033687
[142,] -0.214508638
[143,] -0.023286341
[144,] -0.026212901
[145,] -0.213768615
[146,] -0.193101841
[147,] -0.077242714
[148,] -0.123847291
[149,] -0.124599210
[150,] -0.125724061
[151,] -0.127209361
[152,] -0.126657065
[153,] -0.119704855
[154,] -0.118473353
[155,] -0.118273165
[156,] -0.101401330
[157,] -0.097458832
[158,] -0.096681655
[159,] -0.123720214
[160,] -0.120137524
[161,] -0.119429818
[162,] -0.164115733
[163,] -0.164251650
[164,] -0.164566592
[165,] -0.144616375
[166,] -0.143425749
[167,] -0.142950528
[168,] -0.125299928
[169,] -0.122927898
[170,] -0.037961180
[171,] -0.034099942
[172,] -0.168791828
[173,] -0.170197134
[174,] -0.172234650
[175,] -0.192336894
[176,] -0.146545730
[177,] -0.157878916
[178,] -0.043014129
[179,] -0.061973968
[180,] -0.091094947
[181,] -0.038302826
[182,] -0.164384385
[183,] -0.150273560
[184,] -0.147499434
[185,] -0.229191940
[186,] -0.193256903
[187,] -0.176428343
[188,] -0.141085637
[189,] -0.130118758
[190,] -0.124850682
[191,] -0.132946906
[192,] -0.436465240
[193,] -0.168470288
[194,] -0.151859771
[195,] -0.176428343
[196,] -0.182555610
[197,] -0.124220991
[198,] -0.030415692
[199,] -0.033963226
[200,] -0.037959363
[201,] -0.042016247
[202,] -0.050326942
[203,] -0.054588385
[204,] -0.058925885
[205,] -0.063343654
[206,] -0.067846109
[207,] -0.072437895
[208,] -0.081909387
[209,] -0.096919581
[210,] -0.153211398
[211,] -0.159113329
[212,] -0.164702340
[213,] -0.225791044
[214,]  0.066267616
[215,]  0.063036484
[216,]  0.054036198
[217,] -0.034021032
[218,] -0.193278278
[219,] -0.208936790
[220,]  0.090051003
[221,] -0.170516438
[222,] -0.178634579
[223,] -0.135294746
[224,] -0.107845673
[225,] -0.173819066
[226,] -0.178493407
[227,] -0.177894274
[228,]  0.018789708
[229,] -0.398748802
[230,] -0.424595864
[231,] -0.219662935
[232,] -0.224272196
[233,] -0.254579202
[234,] -0.142183652
[235,] -0.083209898
[236,] -0.084848625
[237,] -0.096272772
[238,] -0.088761846
[239,]  0.109607219
[240,] -0.013702694
[241,] -0.019955316
[242,]  0.056921510
[243,]  0.005987303
[244,] -0.003312949
[245,] -0.009355190
[246,] -0.112100206
[247,] -0.181705161
[248,] -0.238398992
[249,] -0.226939121
[250,] -0.002639998
[251,] -0.112853877
[252,] -0.102944163
[253,] -0.063956186
[254,] -0.110931396
[255,] -0.122464121
[256,] -0.117053119
[257,] -0.151132118
[258,] -0.092579155
[259,] -0.115685833
[260,] -0.110321912
[261,] -0.165397334
[262,] -0.167065168
[263,] -0.169255111
[264,] -0.233516922
[265,] -0.161887901
[266,] -0.170824771
[267,] -0.185061242
[268,] -0.287840874
[269,] -0.277916853
[270,] -0.248035754
[271,] -0.188521679
[272,] -0.110022327
[273,]  0.054549454
[274,]  0.024991965
[275,] -0.120435223
[276,] -0.071374968
[277,] -0.054152960
[278,] -0.205376709
[279,]  0.131762608
> 
> plotMFs(anfis3)
> 
