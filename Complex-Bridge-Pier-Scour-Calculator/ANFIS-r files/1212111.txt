> 
> setwd("C:/Users/Computer Emergency/Desktop/scourpaper/Complex-Bridge-Pier-Scour-Calculator-1.0/ANFIS-r files")  #set working folder
> 
> rmse <- function(error)
+ {
+   sqrt(mean(error^2))
+ }
> #x1 log(bpg/bpc+.05)x2 log(bcol/bpc+.05)x3 log(h0/y+2.1)x4 log(h1/y+1.55)
> #x5 log(T/y+.05)x6 log(bpc/y)x7 log(f1/bcol+.05)z log(be/b*+.05)
> 
> MyData = read.csv("anfis-log_x_b3.txt",header=TRUE)
> MyData2 = read.csv("test_data.txt",header=TRUE)
> 
> 
> library("anfis")
> require("parallel")
> if(.Platform$OS.type == "windows"){
+ options(mc.cores=5)
+ }else{
+ options(mc.cores=5) 
+ }
> 
> membershipFunction<-list(
+ x1m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.91,sigma=.2))),
+ 
+ x2m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-1.3,sigma=0.4)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.02,sigma=0.4))),
+ 
+ x3m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.29,sigma=0.80))),
+ 
+ x4m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.00,sigma=0.1)),
+       new(Class="NormalizedGaussianMF",parameters=c(mu=.41,sigma=0.1))),
+ 
+ x5m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.48,sigma=0.50))),
+ 
+ x6m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=-.13,sigma=0.78))),
+ 
+ x7m=c(new(Class="NormalizedGaussianMF",parameters=c(mu=.27,sigma=0.5))))
> 
> X=MyData[,1:7]
> Y=MyData[,8,drop=FALSE]
> 
> X2=MyData2[,1:7]
> Y2=MyData2[,8,drop=FALSE]
> 
> X= as.matrix(as.data.frame(lapply(X, as.numeric)))
> typeof(X)
[1] "double"
> typeof(Y)
[1] "list"
> Y= as.matrix(as.data.frame(lapply(Y, as.numeric)))
> 
> X2= as.matrix(as.data.frame(lapply(X2, as.numeric)))
> Y2= as.matrix(as.data.frame(lapply(Y2, as.numeric)))
> 
> anfis3 <- new(Class="ANFIS",X,Y,membershipFunction)
> 
> trainOutput <- trainHybridJangOffLine(anfis3, epochs=10)
[1] "epoch:  1"
[1] "epoch:  2"
[1] "epoch:  3"
[1] "epoch:  4"
[1] "epoch:  5"
[1] "epoch:  6"
[1] "epoch:  7"
[1] "epoch:  8"
[1] "epoch:  9"
> 
> 
> summary(anfis3)
ANFIS network 
Trainning Set: 
         dim(x)= 279x7 
         dim(y)= 279x1 
Arquitecture:  7 ( 1x2x1x2x1x1x1 ) - 4 - 32 ( 32x1 ) - 1 
Last training error:  5.626808 

Call: trainHybridJangOffLine(object = anfis3, epochs = 10)

Statistics for Off-line training
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  5.627   5.633   5.638   5.636   5.641   5.642 
> coef(anfis3)
$`premises`
$`premises`$`x1m`
$`premises`$`x1m`[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.8904762  0.2521770 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x2m
$`premises`$x2m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-1.2905915  0.4285501 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x2m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
0.02052718 0.39991304 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x3m
$`premises`$x3m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.29  0.80 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x4m
$`premises`$x4m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
           mu         sigma 
-1.689491e-20  1.000000e-01 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))

$`premises`$x4m[[2]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.41  0.10 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x5m
$`premises`$x5m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.4767814  0.5016034 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x6m
$`premises`$x6m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
        mu      sigma 
-0.1300429  0.7799928 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))


$`premises`$x7m
$`premises`$x7m[[1]]
MembershipFunction:  Normalized Gaussian Membership Function 
Number of parameters: 2 
   mu sigma 
 0.27  0.50 
Expression: expression(exp(-1/2 * ((x - mu)/sigma)^2))



$consequents
                z
 [1,] -0.06919607
 [2,]  5.75403812
 [3,] -3.52475930
 [4,] -0.28460074
 [5,] -1.00291656
 [6,]  2.65514635
 [7,] -0.30332046
 [8,]  4.39516429
 [9,] -0.24056352
[10,]  0.88776855
[11,]  0.55288758
[12,] -0.64981068
[13,]  0.05599234
[14,] -0.61876303
[15,] -0.32474774
[16,] -0.41019995
[17,]  0.19613795
[18,]  2.15151505
[19,] -0.45418417
[20,]  3.44249265
[21,] -0.08550979
[22,]  0.33076155
[23,] -0.85771579
[24,]  0.38848387
[25,]  0.12212063
[26,]  0.29488675
[27,] -0.89493308
[28,] -0.05096913
[29,] -0.13271020
[30,] -0.06370313
[31,]  0.08096467
[32,]  0.26006419

> 
> predictedY <- predict(anfis3,X)
> err=rmse(MyData$z-predictedY)
> err
[1] 0.142556
> 
> 
> predictedY2 <- predict(anfis3,X2)
> err2=rmse(MyData2$z-predictedY2)
> err2
[1] 1.288137
> 
> graphics.off()
> dev.new()
> 
> axislimit_u= max( max(MyData$z),max(predictedY))
> axislimit_l= min( min(MyData$z),min(predictedY),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData$z,predictedY,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("train-rmse",round(err,2)))
> 
> dev.new(xpos=100)
> 
> axislimit_u= max( max(MyData2$z),max(predictedY2))
> axislimit_l= min( min(MyData2$z),min(predictedY2),0)
> xlim_=c(axislimit_l,axislimit_u)
> plot(MyData2$z,predictedY2,xlim=xlim_,ylim=xlim_)
> lines(c(0,axislimit_u),c(0,axislimit_u),col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*1.2),lty=2,col="red")
> lines(c(0,axislimit_u),c(0,axislimit_u*.8),lty=2,col="red")
> title(paste("test-rmse=",round(err2,2)))
> 
> dev.new()
> 
> 
> 
> vars=7
> 
> 
> list_coef=coef(anfis3)$consequents
> 
> no_functions=length(list_coef)/(vars+1)
> 
> for (i in 1:no_functions)
+ {
+ if(i==1){cat("\n")}
+ str=i
+ str=paste('z',i,'=',list_coef[(i-1)*(vars+1)+vars+1], sep = '')
+ for (j in 1:vars)
+ {
+ str=paste(str,'+',list_coef[(i-1)*(vars+1)+j],'*x',j, sep = '')
+ }
+ str=paste(str,"\n")
+ cat(str)
+ if(i==no_functions){cat("\n")}
+ }

z1=4.39516428571549+-0.0691960700447818*x1+5.75403812010254*x2+-3.5247593003603*x3+-0.28460074362236*x4+-1.00291655598891*x5+2.65514634892186*x6+-0.303320458716535*x7 
z2=-0.410199953226195+-0.240563520829832*x1+0.887768554404329*x2+0.55288758129456*x3+-0.649810676368187*x4+0.055992342589626*x5+-0.618763028059833*x6+-0.324747744661639*x7 
z3=0.388483866008856+0.19613795015767*x1+2.1515150455168*x2+-0.454184173599333*x3+3.44249265039117*x4+-0.0855097937112014*x5+0.330761547521004*x6+-0.857715792779103*x7 
z4=0.260064187562852+0.122120631461355*x1+0.294886749573152*x2+-0.894933082527784*x3+-0.050969132527632*x4+-0.132710202778604*x5+-0.0637031349415636*x6+0.0809646719987178*x7 

> 
> 
> list_coef
                z
 [1,] -0.06919607
 [2,]  5.75403812
 [3,] -3.52475930
 [4,] -0.28460074
 [5,] -1.00291656
 [6,]  2.65514635
 [7,] -0.30332046
 [8,]  4.39516429
 [9,] -0.24056352
[10,]  0.88776855
[11,]  0.55288758
[12,] -0.64981068
[13,]  0.05599234
[14,] -0.61876303
[15,] -0.32474774
[16,] -0.41019995
[17,]  0.19613795
[18,]  2.15151505
[19,] -0.45418417
[20,]  3.44249265
[21,] -0.08550979
[22,]  0.33076155
[23,] -0.85771579
[24,]  0.38848387
[25,]  0.12212063
[26,]  0.29488675
[27,] -0.89493308
[28,] -0.05096913
[29,] -0.13271020
[30,] -0.06370313
[31,]  0.08096467
[32,]  0.26006419
> 
> 
> for (i in 1:vars){
+ if(i==1){cat("\n")}
+ #if(length(membershipFunction[[i]])>1){
+ for (j in 1:length(membershipFunction[[i]])){
+ str=""
+ mu__=getPremises(anfis3)[[i]][[j]][1][[1]]
+ stdev__=getPremises(anfis3)[[i]][[j]][2][[1]]
+ str=paste(str,"w",i,'_',j,"=exp(-0.5*(x",i,"-",mu__,") ^ 2/",stdev__," ^ 2)",sep="")
+ cat(str,"\n")
+ }
+ cat("\n")
+ #}
+ }

w1_1=exp(-0.5*(x1--0.890476184802065) ^ 2/0.252177034516429 ^ 2) 

w2_1=exp(-0.5*(x2--1.29059150210989) ^ 2/0.428550127943164 ^ 2) 
w2_2=exp(-0.5*(x2-0.0205271786821522) ^ 2/0.399913037539657 ^ 2) 

w3_1=exp(-0.5*(x3-0.29) ^ 2/0.8 ^ 2) 

w4_1=exp(-0.5*(x4--1.68949096782074e-20) ^ 2/0.1 ^ 2) 
w4_2=exp(-0.5*(x4-0.41) ^ 2/0.1 ^ 2) 

w5_1=exp(-0.5*(x5--0.476781366855672) ^ 2/0.501603440851928 ^ 2) 

w6_1=exp(-0.5*(x6--0.130042904083877) ^ 2/0.779992848318173 ^ 2) 

w7_1=exp(-0.5*(x7-0.269999999999999) ^ 2/0.500000000000003 ^ 2) 

> 
> for (i in 1:no_functions){
+ str=paste('ww',i,'=',sep='')
+ for (j in 1:vars){
+ str=paste(str,'w',j,'_',getRules(anfis3)[i,j],sep='')
+ if(j<vars){str=paste(str,'*',sep='')}
+ }
+ cat(str,"\n")
+ }
ww1=w1_1*w2_1*w3_1*w4_1*w5_1*w6_1*w7_1 
ww2=w1_1*w2_2*w3_1*w4_1*w5_1*w6_1*w7_1 
ww3=w1_1*w2_1*w3_1*w4_2*w5_1*w6_1*w7_1 
ww4=w1_1*w2_2*w3_1*w4_2*w5_1*w6_1*w7_1 
> 
> str='\nwwN='
> str2='\nz='
> for (i in 1:no_functions){
+ str=paste(str,'ww',i,sep='')
+ str2=paste(str2,'z',i,'*ww',i,sep='')
+ if(i<no_functions){str=paste(str,'+',sep='')}
+ if(i<no_functions){str2=paste(str2,'+',sep='')}
+ }
> str=paste(str,'\n\n')
> str2=paste(str2,'\n\n')
> 
> cat(str)

wwN=ww1+ww2+ww3+ww4 

> cat(str2)

z=z1*ww1+z2*ww2+z3*ww3+z4*ww4 

> 
> fitted.values(anfis3)
                   z
  [1,] -0.1774592445
  [2,] -0.1652694146
  [3,] -0.1756425965
  [4,] -0.1852290517
  [5,] -0.1881254586
  [6,] -0.1747456530
  [7,] -0.1503460248
  [8,] -0.1481304489
  [9,] -0.1361264482
 [10,] -0.1701253762
 [11,] -0.1667512964
 [12,] -0.1652061813
 [13,] -0.1317026975
 [14,] -0.1415255783
 [15,] -0.0622939644
 [16,] -0.0931178829
 [17,] -0.0955018034
 [18,] -0.0937319746
 [19,] -0.1403936361
 [20,] -0.1739988339
 [21,] -0.1681488308
 [22,] -0.1239826489
 [23,] -0.1632176110
 [24,] -0.1831186217
 [25,] -0.1844193116
 [26,] -0.1834414824
 [27,] -0.1816593982
 [28,] -0.1791922189
 [29,] -0.1761194783
 [30,] -0.1724944998
 [31,] -0.1704864194
 [32,] -0.0698334630
 [33,] -0.2096541507
 [34,] -0.0518000176
 [35,] -0.1268360943
 [36,] -0.1268360943
 [37,] -0.1126141816
 [38,] -0.0801865419
 [39,] -0.0510738424
 [40,] -0.0537120106
 [41,] -0.0549301618
 [42,] -0.0739147924
 [43,] -0.0775278393
 [44,] -0.1250902661
 [45,] -0.1125164915
 [46,] -0.1198390822
 [47,] -0.1312092194
 [48,] -0.2012873905
 [49,] -0.1785815776
 [50,] -0.1117024130
 [51,] -0.0454570661
 [52,] -0.0825447300
 [53,] -0.1514168763
 [54,] -0.1822012040
 [55,] -0.2728849401
 [56,] -0.1748928836
 [57,] -0.0963457082
 [58,] -0.1394999991
 [59,] -0.1162747725
 [60,] -0.1725666513
 [61,] -0.1773068232
 [62,] -0.2293539878
 [63,] -0.1320325913
 [64,] -0.2003475638
 [65,] -0.2705397012
 [66,] -0.0982005982
 [67,] -0.0864263324
 [68,] -0.0413207077
 [69,] -0.0385583601
 [70,] -0.0501990246
 [71,] -0.1111430603
 [72,] -0.0411409520
 [73,] -0.0609769192
 [74,] -0.0595649550
 [75,] -0.0953921073
 [76,] -0.1112811904
 [77,] -0.1192104055
 [78,] -0.1022331879
 [79,] -0.1133605368
 [80,] -0.1265309437
 [81,] -0.0661270228
 [82,] -0.0768340251
 [83,] -0.1046937962
 [84,] -0.1189840203
 [85,] -0.0932153865
 [86,] -0.1037083192
 [87,] -0.1072860220
 [88,] -0.0693265118
 [89,] -0.1100458616
 [90,] -0.0546425627
 [91,] -0.0810978696
 [92,] -0.0983363379
 [93,] -0.0915822231
 [94,] -0.0932810676
 [95,] -0.1137865798
 [96,] -0.1087738083
 [97,] -0.0760439913
 [98,] -0.0781074145
 [99,] -0.0999718446
[100,] -0.1227971086
[101,] -0.0952009830
[102,] -0.0767970795
[103,]  0.1854505306
[104,]  0.1187029926
[105,] -0.1022020387
[106,] -0.1044502488
[107,] -0.1053957635
[108,] -0.1502605010
[109,] -0.0301177322
[110,] -0.0961678244
[111,] -0.0767583959
[112,] -0.0961678244
[113,] -0.0767583959
[114,] -0.1207945422
[115,] -0.1218199122
[116,] -0.1984573105
[117,] -0.1682341127
[118,] -0.2003406590
[119,] -0.1888332875
[120,] -0.1865442012
[121,] -0.1858944821
[122,] -0.1759824302
[123,] -0.1729254686
[124,] -0.1539895384
[125,] -0.1422450162
[126,] -0.0740777384
[127,] -0.0754579215
[128,] -0.0707693654
[129,] -0.0693534149
[130,] -0.0700455118
[131,] -0.3354871103
[132,] -0.3788260231
[133,] -0.3564294461
[134,] -0.3659031402
[135,] -0.3659031402
[136,] -0.3590762645
[137,] -0.3615702128
[138,] -0.3703099559
[139,] -0.3707539706
[140,] -0.3509568735
[141,] -0.0939018458
[142,] -0.1842787692
[143,] -0.0290269276
[144,] -0.0288956344
[145,] -0.1228708612
[146,] -0.0968674263
[147,] -0.0981397616
[148,] -0.1721401754
[149,] -0.1268448684
[150,] -0.0764273150
[151,] -0.0513281171
[152,] -0.0558913613
[153,] -0.0587473116
[154,] -0.0274601383
[155,] -0.0330026786
[156,] -0.0730901433
[157,] -0.0346551187
[158,] -0.0356317176
[159,] -0.0675019678
[160,] -0.0778612946
[161,] -0.0969679856
[162,] -0.0484913597
[163,] -0.0504131325
[164,] -0.1423257945
[165,] -0.0640151476
[166,] -0.1131295160
[167,] -0.1456127038
[168,] -0.0708941844
[169,] -0.1159112715
[170,] -0.0319760732
[171,] -0.0296622996
[172,] -0.0598990199
[173,] -0.0738663771
[174,] -0.1769813788
[175,] -0.0842220256
[176,] -0.1012515476
[177,] -0.1802375915
[178,] -0.0681342147
[179,] -0.0407787340
[180,]  0.0052767665
[181,] -0.0319799527
[182,] -0.1613681391
[183,] -0.0864069260
[184,] -0.0944506980
[185,] -0.2159530423
[186,] -0.2183918710
[187,] -0.2130405567
[188,] -0.1902629505
[189,] -0.1742339631
[190,] -0.1596527361
[191,] -0.1794184874
[192,] -0.2110403982
[193,] -0.2096635439
[194,] -0.1998972397
[195,] -0.2130405567
[196,] -0.2152355330
[197,] -0.1569055286
[198,] -0.1299130693
[199,] -0.1252176050
[200,] -0.1197949589
[201,] -0.1141556198
[202,] -0.1022210365
[203,] -0.0959208841
[204,] -0.0893942610
[205,] -0.0826367859
[206,] -0.0756433048
[207,] -0.0684078741
[208,] -0.0531832812
[209,] -0.0283341677
[210,] -0.0694739325
[211,] -0.0646431866
[212,] -0.0744484001
[213,] -0.4017155054
[214,]  0.0731778403
[215,]  0.0595059064
[216,]  0.0232415437
[217,] -0.1778946976
[218,] -0.1962087848
[219,] -0.2561663323
[220,]  0.0300613658
[221,]  0.0363616885
[222,] -0.2112393371
[223,] -0.1115338256
[224,] -0.0885396431
[225,] -0.1394518898
[226,] -0.1657344437
[227,] -0.1659551545
[228,] -0.0731528079
[229,] -0.3179180342
[230,] -0.3733792377
[231,] -0.2192028379
[232,] -0.2375126788
[233,] -0.1865577770
[234,]  0.1289865984
[235,] -0.1386636535
[236,] -0.1434538349
[237,] -0.0741380904
[238,] -0.1328671174
[239,]  0.1566098285
[240,] -0.0358274070
[241,] -0.0337061737
[242,]  0.0721387816
[243,] -0.0163573909
[244,] -0.0267557989
[245,] -0.0206909293
[246,] -0.1774444658
[247,] -0.2467059476
[248,] -0.2864027186
[249,] -0.2291708659
[250,] -0.0580062090
[251,] -0.0911015191
[252,] -0.0941736561
[253,] -0.2602424076
[254,] -0.3122897248
[255,] -0.2510018889
[256,] -0.0660100141
[257,]  0.0008067686
[258,] -0.0508172137
[259,] -0.1682194502
[260,] -0.1612572537
[261,] -0.2699367271
[262,] -0.2634625515
[263,] -0.2312211044
[264,] -0.2377178074
[265,] -0.2110042188
[266,] -0.2180189248
[267,] -0.1574829566
[268,] -0.3496821619
[269,] -0.4114608801
[270,] -0.3700873522
[271,] -0.0675526361
[272,] -0.0224768916
[273,]  0.0224618670
[274,]  0.1084575863
[275,] -0.1307857750
[276,] -0.2066297128
[277,] -0.2148672474
[278,] -0.1662121214
[279,]  0.0896684301
> 
> plotMFs(anfis3)
> 
